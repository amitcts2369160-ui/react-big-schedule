{"version":3,"file":"440.bundle.js","mappings":"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","sources":["webpack://react-big-schedule/./src/examples/components/ResourceItem.jsx","webpack://react-big-schedule/./src/examples/components/ResourceList.jsx","webpack://react-big-schedule/./src/examples/components/TaskItem.jsx","webpack://react-big-schedule/./src/examples/components/TaskList.jsx","webpack://react-big-schedule/./src/examples/helpers/DnDTypes.js","webpack://react-big-schedule/./src/examples/pages/Drag-And-Drop/class-based.jsx","webpack://react-big-schedule/./src/examples/pages/Drag-And-Drop/index.jsx"],"sourcesContent":["/* eslint-disable */\r\nimport React from 'react';\r\n\r\nfunction ResourceItem({ resource, isDragging, connectDragSource, connectDragPreview }) {\r\n  const dragContent = <li style={{ color: 'red', fontWeight: 'bold', fontSize: '20px', listStyle: 'none' }}>{resource.name}</li>;\r\n\r\n  return isDragging ? null : <div>{connectDragPreview(connectDragSource(dragContent))}</div>;\r\n}\r\n\r\nexport default ResourceItem;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\n\r\nfunction ResourceList({ schedulerData, newEvent, resourceDndSource }) {\r\n  const DnDResourceItem = resourceDndSource.getDragSource();\r\n  const resources = schedulerData.resources;\r\n\r\n  return (\r\n    <ul>\r\n      {resources.map(resource => (\r\n        <DnDResourceItem key={resource.id} resource={resource} newEvent={newEvent} schedulerData={schedulerData} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ResourceList;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\n\r\nfunction TaskItem({ task, isDragging, connectDragSource, connectDragPreview }) {\r\n  const dragContent = <li style={{ color: 'red', fontWeight: 'bold', fontSize: '20px', listStyle: 'none' }}>{task.name}</li>;\r\n\r\n  return isDragging ? null : <>{connectDragPreview(connectDragSource(dragContent))}</>;\r\n}\r\n\r\nexport default TaskItem;\r\n","/* eslint-disable */\r\nimport React from 'react';\r\n\r\nfunction TaskList({ schedulerData, newEvent, taskDndSource }) {\r\n  const DnDTaskItem = taskDndSource.getDragSource();\r\n  const tasks = schedulerData.eventGroups;\r\n\r\n  return (\r\n    <ul>\r\n      {tasks?.map(task => (\r\n        <DnDTaskItem key={task.id} task={task} newEvent={newEvent} schedulerData={schedulerData} />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","/* eslint-disable */\r\nexport const DnDTypes = { TASK: 'task', RESOURCE: 'resource' };\r\n","/* eslint-disable */\r\nimport { Col, Row, Typography } from 'antd';\r\nimport React, { Component } from 'react';\r\nimport { DemoData, DnDSource, Scheduler, SchedulerData, ViewType, wrapperFun } from '../../../index';\r\nimport ResourceItem from '../../components/ResourceItem';\r\nimport ResourceList from '../../components/ResourceList';\r\nimport TaskItem from '../../components/TaskItem';\r\nimport TaskList from '../../components/TaskList';\r\nimport { DnDTypes } from '../../helpers/DnDTypes';\r\n\r\nclass DragAndDrop extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const schedulerData = new SchedulerData('2022-12-18', ViewType.Month, false, false, {\r\n      schedulerMaxHeight: 500,\r\n      besidesWidth: window.innerWidth <= 1600 ? 400 : 500,\r\n      views: [\r\n        { viewName: 'Agenda View', viewType: ViewType.Month, showAgenda: true, isEventPerspective: false },\r\n        { viewName: 'Resource View', viewType: ViewType.Month, showAgenda: false, isEventPerspective: false },\r\n        { viewName: 'Task View', viewType: ViewType.Month, showAgenda: false, isEventPerspective: true },\r\n      ],\r\n    });\r\n    schedulerData.localeDayjs.locale('en');\r\n    schedulerData.setResources(DemoData.resources);\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.state = {\r\n      viewModel: schedulerData,\r\n      taskDndSource: new DnDSource(props => props.task, TaskItem, true, DnDTypes.TASK),\r\n      resourceDndSource: new DnDSource(props => props.resource, ResourceItem, true, DnDTypes.RESOURCE),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { viewModel, taskDndSource, resourceDndSource } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Row align=\"middle\" justify=\"center\">\r\n          <Typography.Title level={4}>\r\n            {viewModel.isEventPerspective\r\n              ? 'Drag a resource from outside and drop to the resource view.'\r\n              : 'Drag a task from outside and drop to the resource view'}\r\n          </Typography.Title>\r\n        </Row>\r\n        <Row>\r\n          <Col span={20}>\r\n            <Scheduler\r\n              schedulerData={viewModel}\r\n              prevClick={this.prevClick}\r\n              nextClick={this.nextClick}\r\n              onSelectDate={this.onSelectDate}\r\n              onViewChange={this.onViewChange}\r\n              eventItemClick={this.eventClicked}\r\n              viewEventClick={this.ops1}\r\n              viewEventText=\"Ops 1\"\r\n              viewEvent2Text=\"Ops 2\"\r\n              viewEvent2Click={this.ops2}\r\n              updateEventStart={this.updateEventStart}\r\n              updateEventEnd={this.updateEventEnd}\r\n              moveEvent={this.moveEvent}\r\n              movingEvent={this.movingEvent}\r\n              newEvent={this.newEvent}\r\n              subtitleGetter={this.subtitleGetter}\r\n              dndSources={[taskDndSource, resourceDndSource]}\r\n              toggleExpandFunc={this.toggleExpandFunc}\r\n            />\r\n          </Col>\r\n          <Col span={4}>\r\n            {viewModel.isEventPerspective ? (\r\n              <ResourceList schedulerData={viewModel} newEvent={this.newEvent} resourceDndSource={resourceDndSource} />\r\n            ) : (\r\n              <TaskList schedulerData={viewModel} newEvent={this.newEvent} taskDndSource={taskDndSource} />\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  prevClick = schedulerData => {\r\n    schedulerData.prev();\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData,\r\n    });\r\n  };\r\n\r\n  nextClick = schedulerData => {\r\n    schedulerData.next();\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData,\r\n    });\r\n  };\r\n\r\n  onViewChange = (schedulerData, view) => {\r\n    schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\r\n    schedulerData.config.creatable = !view.isEventPerspective;\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData,\r\n    });\r\n  };\r\n\r\n  onSelectDate = (schedulerData, date) => {\r\n    schedulerData.setDate(date);\r\n    schedulerData.setEvents(DemoData.eventsForTaskView);\r\n    this.setState({\r\n      viewModel: schedulerData,\r\n    });\r\n  };\r\n\r\n  eventClicked = (schedulerData, event) => {\r\n    alert(`You just clicked an event: {id: ${event.id}, title: ${event.title}}`);\r\n  };\r\n\r\n  ops1 = (schedulerData, event) => {\r\n    alert(`You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`);\r\n  };\r\n\r\n  ops2 = (schedulerData, event) => {\r\n    alert(`You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`);\r\n  };\r\n\r\n  newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\r\n    if (confirm(`Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`)) {\r\n      let newFreshId = 0;\r\n      schedulerData.events.forEach(item => {\r\n        if (item.id >= newFreshId) newFreshId = item.id + 1;\r\n      });\r\n\r\n      let newEvent = {\r\n        id: newFreshId,\r\n        title: 'New event you just created',\r\n        start,\r\n        end,\r\n        resourceId: slotId,\r\n        bgColor: 'purple',\r\n      };\r\n\r\n      if (type === DnDTypes.RESOURCE) {\r\n        newEvent = {\r\n          ...newEvent,\r\n          groupId: slotId,\r\n          groupName: slotName,\r\n          resourceId: item.id,\r\n        };\r\n      } else if (type === DnDTypes.TASK) {\r\n        newEvent = {\r\n          ...newEvent,\r\n          groupId: item.id,\r\n          groupName: item.name,\r\n        };\r\n      }\r\n\r\n      schedulerData.addEvent(newEvent);\r\n      this.setState({\r\n        viewModel: schedulerData,\r\n      });\r\n    }\r\n  };\r\n\r\n  updateEventStart = (schedulerData, event, newStart) => {\r\n    if (confirm(`Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`)) {\r\n      schedulerData.updateEventStart(event, newStart);\r\n    }\r\n    this.setState({\r\n      viewModel: schedulerData,\r\n    });\r\n  };\r\n\r\n  updateEventEnd = (schedulerData, event, newEnd) => {\r\n    if (confirm(`Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`)) {\r\n      schedulerData.updateEventEnd(event, newEnd);\r\n    }\r\n    this.setState({\r\n      viewModel: schedulerData,\r\n    });\r\n  };\r\n\r\n  moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\r\n    if (\r\n      confirm(\r\n        `Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`,\r\n      )\r\n    ) {\r\n      schedulerData.moveEvent(event, slotId, slotName, start, end);\r\n      this.setState({\r\n        viewModel: schedulerData,\r\n      });\r\n    }\r\n  };\r\n\r\n  movingEvent = (schedulerData, slotId, slotName, newStart, newEnd, action, type, item) => {\r\n    console.log('moving event', schedulerData, slotId, slotName, newStart, newEnd, action, type, item);\r\n  };\r\n\r\n  subtitleGetter = (schedulerData, event) => (schedulerData.isEventPerspective ? schedulerData.getResourceById(event.resourceId).name : event.groupName);\r\n\r\n  toggleExpandFunc = (schedulerData, slotId) => {\r\n    schedulerData.toggleExpandStatus(slotId);\r\n    this.setState({\r\n      viewModel: schedulerData,\r\n    });\r\n  };\r\n}\r\n\r\nexport default wrapperFun(DragAndDrop);\r\n","import { Row, Typography } from 'antd';\r\nimport React from 'react';\r\nimport ClassBased from './class-based';\r\nimport SourceCode from '../../components/SourceCode';\r\n\r\nfunction Basic() {\r\n  return (\r\n    <>\r\n      <Row align=\"middle\" justify=\"center\">\r\n        <Typography.Title level={2} className=\"m-0\">\r\n          Drag and Drop Example\r\n        </Typography.Title>\r\n      </Row>\r\n      <SourceCode value=\"https://github.com/ansulagrawal/react-big-schedule/blob/master/src/examples/pages/Drag-And-Drop/index.jsx\" />\r\n      <ClassBased />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Basic;\r\n"],"names":["_ref","resource","isDragging","connectDragSource","connectDragPreview","dragContent","React","style","color","fontWeight","fontSize","listStyle","name","schedulerData","newEvent","DnDResourceItem","resourceDndSource","getDragSource","resources","map","key","id","task","DnDTaskItem","taskDndSource","tasks","eventGroups","DnDTypes","DragAndDrop","_Component","props","_this","_classCallCheck","_defineProperty","_callSuper","prev","setEvents","DemoData","eventsForTaskView","setState","viewModel","next","view","setViewType","viewType","showAgenda","isEventPerspective","config","creatable","date","setDate","event","alert","concat","title","slotId","slotName","start","end","type","item","confirm","newFreshId","events","forEach","resourceId","bgColor","_objectSpread","groupId","groupName","addEvent","newStart","updateEventStart","newEnd","updateEventEnd","moveEvent","action","console","log","getResourceById","toggleExpandStatus","SchedulerData","ViewType","Month","schedulerMaxHeight","besidesWidth","window","innerWidth","views","viewName","localeDayjs","locale","setResources","state","DnDSource","TaskItem","ResourceItem","_inherits","value","_this$state","this","Row","align","justify","Typography","Title","level","Col","span","Scheduler","prevClick","nextClick","onSelectDate","onViewChange","eventItemClick","eventClicked","viewEventClick","ops1","viewEventText","viewEvent2Text","viewEvent2Click","ops2","movingEvent","subtitleGetter","dndSources","toggleExpandFunc","ResourceList","TaskList","Component","wrapperFun","className","SourceCode","ClassBased"],"sourceRoot":""}